From eea6ffd6d970dac6d6bc4742aaa537142b7b6890 Mon Sep 17 00:00:00 2001
From: Yves Zoundi <yves_zoundi@hotmail.com>
Date: Sun, 12 Mar 2023 15:56:25 -0400
Subject: [PATCH] Patch against latest dwl changes

---
 config.def.h | 72 +++++++++++++++++++++++++++++-----------------------
 dwl.c        | 32 ++++++++++++++++++-----
 2 files changed, 66 insertions(+), 38 deletions(-)

diff --git a/config.def.h b/config.def.h
index a1a679519..8cda73823 100644
--- a/config.def.h
+++ b/config.def.h
@@ -93,12 +93,20 @@ static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TA
 
 /* If you want to use the windows key for MODKEY, use WLR_MODIFIER_LOGO */
 #define MODKEY WLR_MODIFIER_ALT
+#define MOD_ALT WLR_MODIFIER_ALT
+#define MOD_CONTROL WLR_MODIFIER_CTRL
+#define MOD_SHIFT WLR_MODIFIER_SHIFT
+#define MOD_LOGO WLR_MODIFIER_LOGO
+#define MOD_NONE 0
+
+/* Prefix key */
+#define PREFIXKEY XKB_KEY_t
 
 #define TAGKEYS(KEY,SKEY,TAG) \
-	{ MODKEY,                    KEY,            view,            {.ui = 1 << TAG} }, \
-	{ MODKEY|WLR_MODIFIER_CTRL,  KEY,            toggleview,      {.ui = 1 << TAG} }, \
-	{ MODKEY|WLR_MODIFIER_SHIFT, SKEY,           tag,             {.ui = 1 << TAG} }, \
-	{ MODKEY|WLR_MODIFIER_CTRL|WLR_MODIFIER_SHIFT,SKEY,toggletag, {.ui = 1 << TAG} }
+	{ 1, {{MODKEY,  KEY}},                      view,       {.ui = 1 << TAG} }, \
+	{ 1, {{MODKEY|MOD_CONTROL, KEY}},           toggleview, {.ui = 1 << TAG} }, \
+	{ 1, {{MODKEY|MOD_SHIFT, SKEY}},            tag,        {.ui = 1 << TAG} }, \
+	{ 1, {{MODKEY|MOD_CONTROL|MOD_SHIFT, KEY}}, toggletag,  {.ui = 1 << TAG} } 
 
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
@@ -107,32 +115,32 @@ static const enum libinput_config_tap_button_map button_map = LIBINPUT_CONFIG_TA
 static const char *termcmd[] = { "foot", NULL };
 static const char *menucmd[] = { "bemenu-run", NULL };
 
-static const Key keys[] = {
+static const Keychord keychords[] = {
 	/* Note that Shift changes certain key codes: c -> C, 2 -> at, etc. */
-	/* modifier                  key                 function        argument */
-	{ MODKEY,                    XKB_KEY_p,          spawn,          {.v = menucmd} },
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Return,     spawn,          {.v = termcmd} },
-	{ MODKEY,                    XKB_KEY_j,          focusstack,     {.i = +1} },
-	{ MODKEY,                    XKB_KEY_k,          focusstack,     {.i = -1} },
-	{ MODKEY,                    XKB_KEY_i,          incnmaster,     {.i = +1} },
-	{ MODKEY,                    XKB_KEY_d,          incnmaster,     {.i = -1} },
-	{ MODKEY,                    XKB_KEY_h,          setmfact,       {.f = -0.05} },
-	{ MODKEY,                    XKB_KEY_l,          setmfact,       {.f = +0.05} },
-	{ MODKEY,                    XKB_KEY_Return,     zoom,           {0} },
-	{ MODKEY,                    XKB_KEY_Tab,        view,           {0} },
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_C,          killclient,     {0} },
-	{ MODKEY,                    XKB_KEY_t,          setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                    XKB_KEY_f,          setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                    XKB_KEY_m,          setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                    XKB_KEY_space,      setlayout,      {0} },
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_space,      togglefloating, {0} },
-	{ MODKEY,                    XKB_KEY_e,         togglefullscreen, {0} },
-	{ MODKEY,                    XKB_KEY_0,          view,           {.ui = ~0} },
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_parenright, tag,            {.ui = ~0} },
-	{ MODKEY,                    XKB_KEY_comma,      focusmon,       {.i = WLR_DIRECTION_LEFT} },
-	{ MODKEY,                    XKB_KEY_period,     focusmon,       {.i = WLR_DIRECTION_RIGHT} },
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_less,       tagmon,         {.i = WLR_DIRECTION_LEFT} },
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_greater,    tagmon,         {.i = WLR_DIRECTION_RIGHT} },
+	/* count key_sequences                           function          argument */
+	{ 1, {{MODKEY, XKB_KEY_p}},                      spawn,            { .v = menucmd } },
+	{ 1, {{MODKEY|MOD_SHIFT, XKB_KEY_Return}},       spawn,            { .v = termcmd } },
+	{ 1, {{MODKEY, XKB_KEY_j}},                      focusstack,       {.i = +1} },
+	{ 1, {{MODKEY, XKB_KEY_k}},                      focusstack,       {.i = -1} },
+	{ 1, {{MODKEY, XKB_KEY_i}},                      incnmaster,       {.i = +1} },
+	{ 1, {{MODKEY, XKB_KEY_d}},                      incnmaster,       {.i = -1} },
+	{ 1, {{MODKEY, XKB_KEY_h}},                      setmfact,         {.f = -0.05} },
+	{ 1, {{MODKEY, XKB_KEY_l}},                      setmfact,         {.f = +0.05} },
+	{ 1, {{MODKEY, XKB_KEY_Return}},                 zoom,             {0} },
+	{ 1, {{MODKEY, XKB_KEY_Tab}},                    view,             {0} },
+	{ 1, {{MODKEY|MOD_SHIFT, XKB_KEY_C}},            killclient,       {0} },
+	{ 1, {{MODKEY, XKB_KEY_t}},                      setlayout,        {.v = &layouts[0]} },
+	{ 1, {{MODKEY, XKB_KEY_f}},                      setlayout,        {.v = &layouts[1]} },
+	{ 1, {{MODKEY, XKB_KEY_m}},                      setlayout,        {.v = &layouts[2]} },
+	{ 1, {{MODKEY, XKB_KEY_space}},                  setlayout,        {0} },
+	{ 1, {{MODKEY|MOD_SHIFT, XKB_KEY_space}},        togglefloating,   {0} },
+	{ 1, {{MODKEY, XKB_KEY_e}},                      togglefullscreen, {0} },
+	{ 1, {{MODKEY, XKB_KEY_0}},                      view,             {.ui = ~0} },
+	{ 1, {{MODKEY|MOD_SHIFT, XKB_KEY_parenright}},   tag,              {.ui = ~0} },
+	{ 1, {{MODKEY, XKB_KEY_comma}},                  focusmon,         {.i = WLR_DIRECTION_LEFT} },
+	{ 1, {{MODKEY, XKB_KEY_period}},                 focusmon,         {.i = WLR_DIRECTION_RIGHT} },
+	{ 1, {{MODKEY|MOD_SHIFT, XKB_KEY_less}},         tagmon,           {.i = WLR_DIRECTION_LEFT} },
+	{ 1, {{MODKEY|MOD_SHIFT, XKB_KEY_greater}},      tagmon,           {.i = WLR_DIRECTION_RIGHT} },
 	TAGKEYS(          XKB_KEY_1, XKB_KEY_exclam,                     0),
 	TAGKEYS(          XKB_KEY_2, XKB_KEY_at,                         1),
 	TAGKEYS(          XKB_KEY_3, XKB_KEY_numbersign,                 2),
@@ -142,11 +150,11 @@ static const Key keys[] = {
 	TAGKEYS(          XKB_KEY_7, XKB_KEY_ampersand,                  6),
 	TAGKEYS(          XKB_KEY_8, XKB_KEY_asterisk,                   7),
 	TAGKEYS(          XKB_KEY_9, XKB_KEY_parenleft,                  8),
-	{ MODKEY|WLR_MODIFIER_SHIFT, XKB_KEY_Q,          quit,           {0} },
+	{ 1, {{MODKEY|MOD_SHIFT, XKB_KEY_Q}},            quit,           {0} },
 
 	/* Ctrl-Alt-Backspace and Ctrl-Alt-Fx used to be handled by X server */
-	{ WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_Terminate_Server, quit, {0} },
-#define CHVT(n) { WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_XF86Switch_VT_##n, chvt, {.ui = (n)} }
+	{ 1, {{WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_Terminate_Server}}, quit, {0} },
+#define CHVT(n) { 1, {{WLR_MODIFIER_CTRL|WLR_MODIFIER_ALT,XKB_KEY_XF86Switch_VT_##n}}, chvt, {.ui = (n)} }
 	CHVT(1), CHVT(2), CHVT(3), CHVT(4), CHVT(5), CHVT(6),
 	CHVT(7), CHVT(8), CHVT(9), CHVT(10), CHVT(11), CHVT(12),
 };
diff --git a/dwl.c b/dwl.c
index fbe4c246f..bd2a87fb6 100644
--- a/dwl.c
+++ b/dwl.c
@@ -131,9 +131,14 @@ typedef struct {
 typedef struct {
 	uint32_t mod;
 	xkb_keysym_t keysym;
+} Key;
+
+typedef struct {
+	unsigned int n;
+	const Key keys[5];
 	void (*func)(const Arg *);
 	const Arg arg;
-} Key;
+} Keychord;
 
 typedef struct {
 	struct wl_list link;
@@ -363,6 +368,8 @@ static struct wlr_box sgeom;
 static struct wl_list mons;
 static Monitor *selmon;
 
+unsigned int currentkey = 0;
+
 /* global event handlers */
 static struct wl_listener cursor_axis = {.notify = axisnotify};
 static struct wl_listener cursor_button = {.notify = buttonpress};
@@ -1372,14 +1379,27 @@ keybinding(uint32_t mods, xkb_keysym_t sym)
 	 * processing.
 	 */
 	int handled = 0;
-	const Key *k;
-	for (k = keys; k < END(keys); k++) {
-		if (CLEANMASK(mods) == CLEANMASK(k->mod) &&
-				sym == k->keysym && k->func) {
-			k->func(&k->arg);
+// You'll need to add this global variable with your other globals
+static Key pressed_sequence[8]; // Adjust size as needed
+
+int
+keybinding(uint32_t mods, xkb_keysym_t sym)
+{
+    int handled = 0;
+    int done = 0;
+    const Keychord *k;
+    
+    // Store current key press
+    pressed_sequence[currentkey].mod = mods;
+    pressed_sequence[currentkey].keysym = sym;
+    
+    for (k = keychords; k < END(keychords) && !handled; k++) {
+        if (k->n > currentkey) {
+            // Check if entire sequence matches so far
+            int sequence_matches = 1;
+            for (int i = 0; i <= currentkey && sequence_matches; i++) {
+                if (CLEANMASK(pressed_sequence[i].mod) != CLEANMASK(k->keys[i].mod) ||
+                    pressed_sequence[i].keysym != k->keys[i].keysym) {
+                    sequence_matches = 0;
+                }
+            }
+            
+            if (sequence_matches) {
+                handled = 1;
+                if (currentkey == k->n - 1 && k->func) {
+                    k->func(&k->arg);
+                    done = 1;
+                }
+            }
+        }
+    }
+    
+    if (handled) {
+        currentkey = done ? 0 : (currentkey + 1);
+    } else {
+        currentkey = 0;
+    }
+    
+    return handled;
+}
+
+ 

